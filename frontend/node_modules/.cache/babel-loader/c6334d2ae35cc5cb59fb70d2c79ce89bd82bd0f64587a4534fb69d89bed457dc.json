{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.instantiate2Address = exports._instantiate2AddressIntermediate = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst utils_1 = require(\"@cosmjs/utils\");\n/**\n * The \"Basic Address\" Hash from\n * https://github.com/cosmos/cosmos-sdk/blob/v0.45.8/docs/architecture/adr-028-public-key-addresses.md\n */\nfunction hash(type, key) {\n  return new crypto_1.Sha256((0, crypto_1.sha256)((0, encoding_1.toAscii)(type))).update(key).digest();\n}\n/**\n * Takes an integer [0, 2**64-1] and returns a one-byte encoding of it.\n */\nfunction toUint64(int) {\n  return math_1.Uint64.fromNumber(int).toBytesBigEndian();\n}\n/**\n * Private function to export test vector data for https://github.com/cosmos/cosmjs/pull/1253.\n * Do not use in production code.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _instantiate2AddressIntermediate(checksum, creator, salt, msg, prefix) {\n  (0, utils_1.assert)(checksum.length === 32);\n  const creatorData = (0, encoding_1.fromBech32)(creator).data;\n  const msgData = typeof msg === \"string\" ? (0, encoding_1.toUtf8)(msg) : new Uint8Array();\n  // Validate inputs\n  if (salt.length < 1 || salt.length > 64) throw new Error(\"Salt must be between 1 and 64 bytes\");\n  const key = new Uint8Array([...(0, encoding_1.toAscii)(\"wasm\"), 0x00, ...toUint64(checksum.length), ...checksum, ...toUint64(creatorData.length), ...creatorData, ...toUint64(salt.length), ...salt, ...toUint64(msgData.length), ...msgData]);\n  const addressData = hash(\"module\", key);\n  const address = (0, encoding_1.toBech32)(prefix, addressData);\n  return {\n    key,\n    addressData,\n    address\n  };\n}\nexports._instantiate2AddressIntermediate = _instantiate2AddressIntermediate;\n/**\n * Predictable address generation for the MsgInstantiateContract2\n * introduced with wasmd 0.29.\n *\n * With `checksum`, `creator` and `salt`, the instantiate 2 address is\n * generated in binary form. The `bech32Prefix` is then used for the bech32 representation.\n * Chains using address formats other than bech32 are not supported by this API.\n */\nfunction instantiate2Address(checksum, creator, salt, bech32Prefix) {\n  // Non-empty msg values are discouraged.\n  // See https://medium.com/cosmwasm/dev-note-3-limitations-of-instantiate2-and-how-to-deal-with-them-a3f946874230.\n  const msg = null;\n  return _instantiate2AddressIntermediate(checksum, creator, salt, msg, bech32Prefix).address;\n}\nexports.instantiate2Address = instantiate2Address;","map":{"version":3,"names":["crypto_1","require","encoding_1","math_1","utils_1","hash","type","key","Sha256","sha256","toAscii","update","digest","toUint64","int","Uint64","fromNumber","toBytesBigEndian","_instantiate2AddressIntermediate","checksum","creator","salt","msg","prefix","assert","length","creatorData","fromBech32","data","msgData","toUtf8","Uint8Array","Error","addressData","address","toBech32","exports","instantiate2Address","bech32Prefix"],"sources":["../src/instantiate2.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,MAAA,GAAAF,OAAA;AACA,MAAAG,OAAA,GAAAH,OAAA;AAEA;;;;AAIA,SAASI,IAAIA,CAACC,IAAY,EAAEC,GAAe;EACzC,OAAO,IAAIP,QAAA,CAAAQ,MAAM,CAAC,IAAAR,QAAA,CAAAS,MAAM,EAAC,IAAAP,UAAA,CAAAQ,OAAO,EAACJ,IAAI,CAAC,CAAC,CAAC,CAACK,MAAM,CAACJ,GAAG,CAAC,CAACK,MAAM,EAAE;AAC/D;AAEA;;;AAGA,SAASC,QAAQA,CAACC,GAAW;EAC3B,OAAOX,MAAA,CAAAY,MAAM,CAACC,UAAU,CAACF,GAAG,CAAC,CAACG,gBAAgB,EAAE;AAClD;AAEA;;;;AAIA;AACA,SAAgBC,gCAAgCA,CAC9CC,QAAoB,EACpBC,OAAe,EACfC,IAAgB,EAChBC,GAAkB,EAClBC,MAAc;EAEd,IAAAnB,OAAA,CAAAoB,MAAM,EAACL,QAAQ,CAACM,MAAM,KAAK,EAAE,CAAC;EAC9B,MAAMC,WAAW,GAAG,IAAAxB,UAAA,CAAAyB,UAAU,EAACP,OAAO,CAAC,CAACQ,IAAI;EAE5C,MAAMC,OAAO,GAAG,OAAOP,GAAG,KAAK,QAAQ,GAAG,IAAApB,UAAA,CAAA4B,MAAM,EAACR,GAAG,CAAC,GAAG,IAAIS,UAAU,EAAE;EAExE;EACA,IAAIV,IAAI,CAACI,MAAM,GAAG,CAAC,IAAIJ,IAAI,CAACI,MAAM,GAAG,EAAE,EAAE,MAAM,IAAIO,KAAK,CAAC,qCAAqC,CAAC;EAE/F,MAAMzB,GAAG,GAAG,IAAIwB,UAAU,CAAC,CACzB,GAAG,IAAA7B,UAAA,CAAAQ,OAAO,EAAC,MAAM,CAAC,EAClB,IAAI,EACJ,GAAGG,QAAQ,CAACM,QAAQ,CAACM,MAAM,CAAC,EAC5B,GAAGN,QAAQ,EACX,GAAGN,QAAQ,CAACa,WAAW,CAACD,MAAM,CAAC,EAC/B,GAAGC,WAAW,EACd,GAAGb,QAAQ,CAACQ,IAAI,CAACI,MAAM,CAAC,EACxB,GAAGJ,IAAI,EACP,GAAGR,QAAQ,CAACgB,OAAO,CAACJ,MAAM,CAAC,EAC3B,GAAGI,OAAO,CACX,CAAC;EACF,MAAMI,WAAW,GAAG5B,IAAI,CAAC,QAAQ,EAAEE,GAAG,CAAC;EACvC,MAAM2B,OAAO,GAAG,IAAAhC,UAAA,CAAAiC,QAAQ,EAACZ,MAAM,EAAEU,WAAW,CAAC;EAC7C,OAAO;IAAE1B,GAAG;IAAE0B,WAAW;IAAEC;EAAO,CAAE;AACtC;AA9BAE,OAAA,CAAAlB,gCAAA,GAAAA,gCAAA;AAgCA;;;;;;;;AAQA,SAAgBmB,mBAAmBA,CACjClB,QAAoB,EACpBC,OAAe,EACfC,IAAgB,EAChBiB,YAAoB;EAEpB;EACA;EACA,MAAMhB,GAAG,GAAG,IAAI;EAChB,OAAOJ,gCAAgC,CAACC,QAAQ,EAAEC,OAAO,EAAEC,IAAI,EAAEC,GAAG,EAAEgB,YAAY,CAAC,CAACJ,OAAO;AAC7F;AAVAE,OAAA,CAAAC,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}