{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupWasmExtension = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst stargate_1 = require(\"@cosmjs/stargate\");\nconst query_1 = require(\"cosmjs-types/cosmwasm/wasm/v1/query\");\nfunction setupWasmExtension(base) {\n  const rpc = (0, stargate_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    wasm: {\n      listCodeInfo: async paginationKey => {\n        const request = {\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        };\n        return queryService.Codes(request);\n      },\n      getCode: async id => {\n        const request = query_1.QueryCodeRequest.fromPartial({\n          codeId: BigInt(id)\n        });\n        return queryService.Code(request);\n      },\n      listContractsByCodeId: async (id, paginationKey) => {\n        const request = query_1.QueryContractsByCodeRequest.fromPartial({\n          codeId: BigInt(id),\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        });\n        return queryService.ContractsByCode(request);\n      },\n      listContractsByCreator: async (creator, paginationKey) => {\n        const request = {\n          creatorAddress: creator,\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        };\n        return queryService.ContractsByCreator(request);\n      },\n      getContractInfo: async address => {\n        const request = {\n          address: address\n        };\n        return queryService.ContractInfo(request);\n      },\n      getContractCodeHistory: async (address, paginationKey) => {\n        const request = {\n          address: address,\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        };\n        return queryService.ContractHistory(request);\n      },\n      getAllContractState: async (address, paginationKey) => {\n        const request = {\n          address: address,\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        };\n        return queryService.AllContractState(request);\n      },\n      queryContractRaw: async (address, key) => {\n        const request = {\n          address: address,\n          queryData: key\n        };\n        return queryService.RawContractState(request);\n      },\n      queryContractSmart: async (address, query) => {\n        const request = {\n          address: address,\n          queryData: (0, encoding_1.toUtf8)(JSON.stringify(query))\n        };\n        const {\n          data\n        } = await queryService.SmartContractState(request);\n        // By convention, smart queries must return a valid JSON document (see https://github.com/CosmWasm/cosmwasm/issues/144)\n        let responseText;\n        try {\n          responseText = (0, encoding_1.fromUtf8)(data);\n        } catch (error) {\n          throw new Error(`Could not UTF-8 decode smart query response from contract: ${error}`);\n        }\n        try {\n          return JSON.parse(responseText);\n        } catch (error) {\n          throw new Error(`Could not JSON parse smart query response from contract: ${error}`);\n        }\n      }\n    }\n  };\n}\nexports.setupWasmExtension = setupWasmExtension;","map":{"version":3,"names":["encoding_1","require","stargate_1","query_1","setupWasmExtension","base","rpc","createProtobufRpcClient","queryService","QueryClientImpl","wasm","listCodeInfo","paginationKey","request","pagination","createPagination","Codes","getCode","id","QueryCodeRequest","fromPartial","codeId","BigInt","Code","listContractsByCodeId","QueryContractsByCodeRequest","ContractsByCode","listContractsByCreator","creator","creatorAddress","ContractsByCreator","getContractInfo","address","ContractInfo","getContractCodeHistory","ContractHistory","getAllContractState","AllContractState","queryContractRaw","key","queryData","RawContractState","queryContractSmart","query","toUtf8","JSON","stringify","data","SmartContractState","responseText","fromUtf8","error","Error","parse","exports"],"sources":["../../../src/modules/wasm/queries.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}