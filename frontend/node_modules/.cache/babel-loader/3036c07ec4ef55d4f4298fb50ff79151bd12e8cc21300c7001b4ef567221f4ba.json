{"ast":null,"code":"import { SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate';\nimport { DirectSecp256k1HdWallet } from '@cosmjs/proto-signing';\nimport { assertIsBroadcastTxSuccess } from '@cosmjs/stargate';\n\n// Blockchain connection parameters\nconst rpcEndpoint = \"https://rpc-testnet.cosmwasm.com\"; // Use testnet RPC endpoint\nconst chainId = \"cosmoshub-testnet\"; // Replace with appropriate chain ID\n\n// Initialize wallet and client\nexport const initClient = async () => {\n  const mnemonic = \"your mnemonic here\"; // Replace with user's mnemonic\n  const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic);\n  const client = await SigningCosmWasmClient.connectWithSigner(rpcEndpoint, wallet);\n  return client;\n};\n\n// Submit claim\nexport const submitClaim = async claimData => {\n  const client = await initClient();\n  const result = await client.execute(claimData.senderAddress, claimData.contractAddress, {\n    submit_claim: {\n      ...claimData\n    }\n  }, \"auto\");\n  assertIsBroadcastTxSuccess(result);\n  console.log(\"Claim submitted:\", result);\n};\n\n// Get claim status\nexport const getClaimStatus = async claimId => {\n  const client = await initClient();\n  const result = await client.queryContractSmart(claimId, {\n    get_status: {}\n  });\n  return result.status;\n};\n\n// Approve claim\nexport const approveClaim = async claimId => {\n  const client = await initClient();\n  const result = await client.execute(claimId, {\n    approve: {}\n  }, \"auto\");\n  assertIsBroadcastTxSuccess(result);\n  console.log(\"Claim approved\");\n};\n\n// Reject claim\nexport const rejectClaim = async claimId => {\n  const client = await initClient();\n  const result = await client.execute(claimId, {\n    reject: {}\n  }, \"auto\");\n  assertIsBroadcastTxSuccess(result);\n  console.log(\"Claim rejected\");\n};\n\n// Get transaction history\nexport const getTransactionHistory = async claimId => {\n  const client = await initClient();\n  const result = await client.queryContractSmart(claimId, {\n    transaction_history: {}\n  });\n  return result.history;\n};","map":{"version":3,"names":["SigningCosmWasmClient","DirectSecp256k1HdWallet","assertIsBroadcastTxSuccess","rpcEndpoint","chainId","initClient","mnemonic","wallet","fromMnemonic","client","connectWithSigner","submitClaim","claimData","result","execute","senderAddress","contractAddress","submit_claim","console","log","getClaimStatus","claimId","queryContractSmart","get_status","status","approveClaim","approve","rejectClaim","reject","getTransactionHistory","transaction_history","history"],"sources":["/Users/sahilsamant/Desktop/BlockChain LY Project/medical-claim-dapp/src/cosmwasm/blockchainConnection.js"],"sourcesContent":["import { SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate';\nimport { DirectSecp256k1HdWallet } from '@cosmjs/proto-signing';\nimport { assertIsBroadcastTxSuccess } from '@cosmjs/stargate';\n\n// Blockchain connection parameters\nconst rpcEndpoint = \"https://rpc-testnet.cosmwasm.com\"; // Use testnet RPC endpoint\nconst chainId = \"cosmoshub-testnet\"; // Replace with appropriate chain ID\n\n// Initialize wallet and client\nexport const initClient = async () => {\n  const mnemonic = \"your mnemonic here\"; // Replace with user's mnemonic\n  const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic);\n  const client = await SigningCosmWasmClient.connectWithSigner(rpcEndpoint, wallet);\n  return client;\n};\n\n// Submit claim\nexport const submitClaim = async (claimData) => {\n  const client = await initClient();\n  const result = await client.execute(\n    claimData.senderAddress, \n    claimData.contractAddress, \n    { submit_claim: { ...claimData } }, \n    \"auto\"\n  );\n  assertIsBroadcastTxSuccess(result);\n  console.log(\"Claim submitted:\", result);\n};\n\n// Get claim status\nexport const getClaimStatus = async (claimId) => {\n  const client = await initClient();\n  const result = await client.queryContractSmart(claimId, { get_status: {} });\n  return result.status;\n};\n\n// Approve claim\nexport const approveClaim = async (claimId) => {\n  const client = await initClient();\n  const result = await client.execute(claimId, { approve: {} }, \"auto\");\n  assertIsBroadcastTxSuccess(result);\n  console.log(\"Claim approved\");\n};\n\n// Reject claim\nexport const rejectClaim = async (claimId) => {\n  const client = await initClient();\n  const result = await client.execute(claimId, { reject: {} }, \"auto\");\n  assertIsBroadcastTxSuccess(result);\n  console.log(\"Claim rejected\");\n};\n\n// Get transaction history\nexport const getTransactionHistory = async (claimId) => {\n  const client = await initClient();\n  const result = await client.queryContractSmart(claimId, { transaction_history: {} });\n  return result.history;\n};\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,2BAA2B;AACjE,SAASC,uBAAuB,QAAQ,uBAAuB;AAC/D,SAASC,0BAA0B,QAAQ,kBAAkB;;AAE7D;AACA,MAAMC,WAAW,GAAG,kCAAkC,CAAC,CAAC;AACxD,MAAMC,OAAO,GAAG,mBAAmB,CAAC,CAAC;;AAErC;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMC,QAAQ,GAAG,oBAAoB,CAAC,CAAC;EACvC,MAAMC,MAAM,GAAG,MAAMN,uBAAuB,CAACO,YAAY,CAACF,QAAQ,CAAC;EACnE,MAAMG,MAAM,GAAG,MAAMT,qBAAqB,CAACU,iBAAiB,CAACP,WAAW,EAAEI,MAAM,CAAC;EACjF,OAAOE,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC9C,MAAMH,MAAM,GAAG,MAAMJ,UAAU,CAAC,CAAC;EACjC,MAAMQ,MAAM,GAAG,MAAMJ,MAAM,CAACK,OAAO,CACjCF,SAAS,CAACG,aAAa,EACvBH,SAAS,CAACI,eAAe,EACzB;IAAEC,YAAY,EAAE;MAAE,GAAGL;IAAU;EAAE,CAAC,EAClC,MACF,CAAC;EACDV,0BAA0B,CAACW,MAAM,CAAC;EAClCK,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEN,MAAM,CAAC;AACzC,CAAC;;AAED;AACA,OAAO,MAAMO,cAAc,GAAG,MAAOC,OAAO,IAAK;EAC/C,MAAMZ,MAAM,GAAG,MAAMJ,UAAU,CAAC,CAAC;EACjC,MAAMQ,MAAM,GAAG,MAAMJ,MAAM,CAACa,kBAAkB,CAACD,OAAO,EAAE;IAAEE,UAAU,EAAE,CAAC;EAAE,CAAC,CAAC;EAC3E,OAAOV,MAAM,CAACW,MAAM;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOJ,OAAO,IAAK;EAC7C,MAAMZ,MAAM,GAAG,MAAMJ,UAAU,CAAC,CAAC;EACjC,MAAMQ,MAAM,GAAG,MAAMJ,MAAM,CAACK,OAAO,CAACO,OAAO,EAAE;IAAEK,OAAO,EAAE,CAAC;EAAE,CAAC,EAAE,MAAM,CAAC;EACrExB,0BAA0B,CAACW,MAAM,CAAC;EAClCK,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;AAC/B,CAAC;;AAED;AACA,OAAO,MAAMQ,WAAW,GAAG,MAAON,OAAO,IAAK;EAC5C,MAAMZ,MAAM,GAAG,MAAMJ,UAAU,CAAC,CAAC;EACjC,MAAMQ,MAAM,GAAG,MAAMJ,MAAM,CAACK,OAAO,CAACO,OAAO,EAAE;IAAEO,MAAM,EAAE,CAAC;EAAE,CAAC,EAAE,MAAM,CAAC;EACpE1B,0BAA0B,CAACW,MAAM,CAAC;EAClCK,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;AAC/B,CAAC;;AAED;AACA,OAAO,MAAMU,qBAAqB,GAAG,MAAOR,OAAO,IAAK;EACtD,MAAMZ,MAAM,GAAG,MAAMJ,UAAU,CAAC,CAAC;EACjC,MAAMQ,MAAM,GAAG,MAAMJ,MAAM,CAACa,kBAAkB,CAACD,OAAO,EAAE;IAAES,mBAAmB,EAAE,CAAC;EAAE,CAAC,CAAC;EACpF,OAAOjB,MAAM,CAACkB,OAAO;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}